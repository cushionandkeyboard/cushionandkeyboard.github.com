<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>Cushion and Keyboard</title><link>http://cushionandkeyboard.com</link><description>platforms for daily practice</description><item><title>ActiveRecord count and sum always operate on the database</title><link>http://cushionandkeyboard.com/2015/04/24/</link><pubDate>Fri, 24 Apr 2015 00:00:00 -0500</pubDate><description>&lt;p&gt;I've always used ActiveRecord's &lt;code&gt;count&lt;/code&gt; method in tests and occasionally saw what I considered strange behaviour in it's result. Today, I saw a validation failing because of my understanding of &lt;code&gt;count&lt;/code&gt;, so I dug into why. Based on what I know now, I'm going to start using &lt;code&gt;length&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; in place of &lt;code&gt;count&lt;/code&gt; unless my intention is truly the SQL notion of &lt;code&gt;COUNT(*)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The difference in these three methods is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;&lt;code&gt;count&lt;/code&gt; will always issue a SQL query in the form &lt;code&gt;SELECT COUNT(*) FROM relation...&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;code&gt;size&lt;/code&gt; will return a size of the association collection if it's already loaded. This is most like &lt;code&gt;Array#size&lt;/code&gt; in that it operates on the in-memory collection. Otherwise, if the association collection is not loaded, it will call &lt;code&gt;count&lt;/code&gt; which issues a query.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;code&gt;length&lt;/code&gt; will load the association collection and then call &lt;code&gt;size&lt;/code&gt; for the return value. Because &lt;code&gt;size&lt;/code&gt; will operate on the collection that was just loaded, &lt;code&gt;length&lt;/code&gt; never results in a &lt;code&gt;count&lt;/code&gt; operation. Also, if the collection is already loaded, &lt;code&gt;length&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are equivalent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, the recommendation in the Rails source is that if you're going to need the records anyway, use &lt;code&gt;length&lt;/code&gt; because it results in one less query. If you don't want to load all the records and really just want the size, use &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So now to my original problem. I had a validation that was failing on create.&lt;/p&gt;
&lt;pre&gt;
class Order &lt; ActiveRecord::Base
  has_many :order_lines

  validate :maximum_number_of_items_exceeded

  def maximum_number_of_items_exceeded
    errors.add(:order_lines, 'must total 20 items or less') if order_lines.sum(:quantity) &gt; 20
  end
end
&lt;/pre&gt;&lt;p&gt;The problem turned out to be an assumption that the &lt;code&gt;sum&lt;/code&gt; method was operating on the in-memory association collection that was in the process of being saved along with it's parent record. Instead, it was issuing a SQL query:&lt;/p&gt;&lt;p&gt;&lt;code&gt;SELECT SUM(&amp;quot;order_lines&amp;quot;.&amp;quot;quantity&amp;quot;) AS sum_id FROM &amp;quot;order_lines&amp;quot;  WHERE &amp;quot;order_lines&amp;quot;.&amp;quot;order_id&amp;quot; = $1  [[&amp;quot;order_id&amp;quot;, 59547231]]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;What made this tricky to discover was that the validation was working correctly on update. Also confusing was that getting a &lt;code&gt;size&lt;/code&gt; on this collection on create returned 1 so I knew there &lt;em&gt;were&lt;/em&gt; order_lines to be summed. Finally, calling &lt;code&gt;count&lt;/code&gt; on the collection always returned zero. That led me to discovering the difference between the two talked about above. The count was, of course, issuing:&lt;/p&gt;&lt;p&gt;&lt;code&gt;SELECT COUNT(*) FROM &amp;quot;order_lines&amp;quot;  WHERE &amp;quot;order_lines&amp;quot;.&amp;quot;order_id&amp;quot; = $1  [[&amp;quot;order_id&amp;quot;, 925119186]]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;So, the condition just needed to be changed to operate on the in-memory collection as was originally intended. So the validation method becomes:&lt;/p&gt;
&lt;pre&gt;
   def maximum_number_of_items_exceeded
     total_quantity = order_lines.map(&amp;:quantity).inject(0) { |total, quantity| total + quantity }
     errors.add(:order_lines, 'must total 20 items or less') if total_quantity &gt; 20
   end
&lt;/pre&gt;&lt;p&gt;Most of my understanding came from reading the Rails source - especially the comments which are pretty great. The relevant files are:&lt;/p&gt;&lt;p&gt;&lt;code&gt;rails/activerecord/lib/active_record/associations/collection_association.rb&lt;/code&gt; &lt;code&gt;rails/activerecord/lib/active_record/associations/collection_proxy.rb&lt;/code&gt;&lt;/p&gt;&lt;p&gt;as of Rails 4.1. These links were helpful too:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6083219/activerecord-size-vs-count&quot;&gt;ActiveRecord: size vs count&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://blog.hasmanythrough.com/2008/2/27/count-length-size&quot;&gt;count vs length vs size&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Hopefully this will help you if you've ever wondered about the difference between these methods.&lt;/p&gt;</description></item><item><title>Password safes</title><link>http://cushionandkeyboard.com/2013/04/13/</link><pubDate>Sat, 13 Apr 2013 00:00:00 -0500</pubDate><description>&lt;p&gt;Until recently, I kept a spreadsheet on my local machine containing my passwords and related information. It was always backed-up to a local NAS device with the rest of my files but it was in a directory with other sensitive files that I don't upload to Dropbox. From that one source I could produce any format I might need; like CSV format for importing into another application or a text-only version for grepping.&lt;/p&gt;&lt;p&gt;When I started out, I was really good about using unique passwords, that were phrases and pretty strong. I even had a tab explaining the whole phrase in case I ever forgot what the cryptic actual password stands for. I would incorporate within the phrase for each password something about the nature of the site. It really helped me remember some pretty crypto-strong passwords and it worked well for many years.&lt;/p&gt;&lt;p&gt;Well, not exactly. I got lazy and tended towards using one of my favorites on many different sites. I try out so many things I never know what I'll stick with so I went the easy route. On important sites or frequently used sites, I still used strong unique passwords but on most everything else I used a common one. Also, because the spreadsheet was at home, it eventually got out of date. Finally, because I'm not a big fan of bloated software, I started editing the text-based version and now had two master password lists which got out-of-sync.&lt;/p&gt;&lt;p&gt;But with the recent attacks against some major sites like Evernote with the result of passwords being compromised, I started thinking about updating the spreadsheet with all the current passwords, then systematically changing all passwords on sites using the common password, and then exporting the master to all the different formats. While I was mulling this over, I changed a couple passwords on sites that had become more critical over time, wrote the new passwords on a sticky note to later update the spreadsheet with...and then lost the note.&lt;/p&gt;&lt;p&gt;So my research for password safes turned up some tools. This post is really not meant as a review of the options but I listed them here in case they might be new and useful to anyone. There's really no suspence - I chose KeePass - but I've added some of my thoughts on each tool regardless.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;&lt;br&gt; Looks really nice with good  browser integration but is proprietary software and I prefer free  software.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://passwordsafe.sourceforge.net/&quot;&gt;Password Safe&lt;/a&gt;&lt;br&gt; Very  windows focused but open source and strong community.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.mypasswords7.com/&quot;&gt;My Passwords&lt;/a&gt;&lt;br&gt; I like that it's  Java-based and well done but doesn't conform to any accepted file  format.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://sourceforge.net/projects/jpwsafe/&quot;&gt;Java Password Safe&lt;/a&gt;&lt;br&gt;  Combination of Password Safe file standard but Java-based. Long-term  this might be the best choice for me because the YubiKey.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.yubico.com/products/yubikey-hardware/&quot;&gt;YubiKey&lt;/a&gt;&lt;br&gt;  YubiKey provides a second layer of security by requiring both the  password and a small USB device.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://agilebits.com/onepassword&quot;&gt;1Password&lt;/a&gt;&lt;br&gt; The website  didn't mention a Linux client. Full stop. I'm obviously very  opinionated about my OS but these decisions are based on pragmatism  not religion.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://keepass.info/&quot;&gt;KeePass&lt;/a&gt;&lt;br&gt; I like that KeePass has a long  history, is an accepted standard, has an pretty good Linux native  client and great support in Firefox using the plugin,  &lt;a href=&quot;http://keefox.org/&quot;&gt;KeeFox&lt;/a&gt;. It's very well done and documented. I  use &lt;a href=&quot;http://conkeror.org/&quot;&gt;Conkeror&lt;/a&gt;, which is a keyboard-driven  derivative that might be able to use the Firefox plugin with  (probably quite a bit) of work. But, really the plugin is icing on  the cake and the normal Firefox form fill-in feature works fine  after the first login.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, I created a KeePass2 file (with the .kbdx extension), set the master password and put it up on Dropbox. I changed my password on all sites that were still using the common one by using the password generation feature in KeePass which defaults to a random 20-bit hash. Because of Dropbox, I've got all my passwords at work and I've shared a folder with my wife who can pull it up if she needs to. I feel back on top of my online passwords and more protected with better security.&lt;/p&gt;</description></item><item><title>Where the application and database meet</title><link>http://cushionandkeyboard.com/2012/07/24/where-the-database-ends/</link><pubDate>Tue, 24 Jul 2012 00:00:00 -0500</pubDate><description>&lt;p&gt;There's an on-going debate on my team about the role of the application and the role of the database - specifically with regards to what business logic and validations go in database triggers and what business logic and validations go in the application. I'm going to give away my opinion early because it's surprising - at least it was to me. The answer is both - but that's not what was surprising to me. I was fully prepared that the answer to the problem was both and that business logic would go in the application and the database would contain the validations that the application would depend on and therefore not duplicate in application code. That is, they would each fulfill some part of the responsibility and together would accomplish the whole. What's surprising is that I'm going to suggest that the much of the same logic be duplicated in the application and in the database because while the logic overlaps, often the goal of each domain is very different, namely, the database's role is to make sure the schema's design is followed and no bad data can be created. But the application's role is store information while creating a pleasant and functional user experience.&lt;/p&gt;&lt;p&gt;There's a modern stream of thought held by some application developers that the database should be a dumb container for data and that all the important logic belongs in the application code. This belief has led to database design that employs surrogate keys. With this style of database, business logic is not desired in the database. The benefits of this style is mostly on the developer side and make it easy to stay in the language of choice in the application for all concerns. Not having to implement features in database's SQL dialect is good for productivity. The down-side is that the database is truly not safe for updates outside of the application layer. Ad-hoc SQL run against the database itself is not guaranteed to create bad data, and in fact guaranteed over time to do just that.&lt;/p&gt;&lt;p&gt;The alternate style is a DBA-centric style that employs meaningful keys in tables and many stored procedures and triggers the enforce a strong business-centric schema with logic and validations. It's not surprising that this style works best with dumb applications, possibly due to supporting multiple languages or platforms against the same database schema. With such a strong central implementation, not only is data centralized but business logic and validation is centralized as well. The down-side is that logic is implemented in a (usually) proprietary dialect of SQL and is not as familiar to application developers so side-effects of database interactions tend to feel like dark magic.&lt;/p&gt;&lt;p&gt;While the topic of surrogate vs. natural keys is another topic altogether, I think the middle of the road - or both roads depending on how you look at it, is the right answer. The DBAs are responsible for a sound schema that doesn't allow bad data to be created. In addition, if a record is inserted that should always trigger a corresponding entry in another part of the system for data integrity to be maintained, the database logic should do that as to not do it would leave the database in a bad state. So while there &lt;strong&gt;is&lt;/strong&gt; business logic and validation in the database it's primary concern is maintaining the integrity of the &lt;strong&gt;state&lt;/strong&gt; of the data. Database logic should &lt;strong&gt;not&lt;/strong&gt; do anything just because it's centralized and convenient. Also, the database should never assume that an application or ad-hoc query will do the right thing. For instance, the DBAs might know for a fact that the application always sets a flag to true but should still act as if it won't and take care of it in the database.&lt;/p&gt;&lt;p&gt;Similarly, the application code should not rely on the database to implement validations or other business logic but implement it in the application code but also use the understanding of what is valid to shield the user from hitting validations at all by disabling or hiding fields or other techniques related to the record state that help avoid errors in the first place. The primary concern of the application is to manage the process and the flow of data entry, coordinating events and user feedback.&lt;/p&gt;&lt;p&gt;If duplication of logic is too unpalatable then once you identify truly identical logic - aggregated totals, for instance, that are needed by both the database and the application, the database could implement a stored procedure or view that can then be used by the application. To the application the stored procedure or view would operate like any other query.&lt;/p&gt;&lt;p&gt;The critical point where the application and database meet is in the transaction. The application submits a unit of work and the database verifies that it's valid. This is where it's easiest to see the separate concerns clearly. It's the application's job to bang on the door and shove the data in to get the job done for the user. In a way, the application is an advocate or proxy for the user and is lobbying on their behalf to let the transaction proceed. It's the database's job to verify and check and reject all but the most rigorously constructed set of queries and run them. In a similar way, the database represents the business and will only allow data through that has the best interest of the business in mind. It's in this way, that the best applications and databases &lt;strong&gt;do&lt;/strong&gt; create the best overall platforms, accomplishing the overall goals by being adversaries with seemingly different but actually the same end.&lt;/p&gt;</description></item><item><title>Good Stuff 2010</title><link>http://cushionandkeyboard.com/2010/12/31/good-stuff-2010/</link><pubDate>Fri, 31 Dec 2010 00:00:00 -0600</pubDate><description>&lt;ol&gt;
  &lt;li&gt;&quot;Dance Anthem Of The 80's&quot; by &lt;strong&gt;Regina Spektor&lt;/strong&gt; from &lt;i&gt;Far&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Blue Overall&quot; by &lt;strong&gt;XTC&lt;/strong&gt; from &lt;i&gt;The Big Express&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Woolly Muffler&quot; by &lt;strong&gt;Harvey Danger&lt;/strong&gt; from &lt;i&gt;Where Have All The Merrymakers Gone&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Good Intentions Paving Co.&quot; by &lt;strong&gt;Joanna Newsom&lt;/strong&gt; from &lt;i&gt;Have One on Me&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;The Whole Of The Moon&quot; by &lt;strong&gt;The Waterboys&lt;/strong&gt; from &lt;i&gt;This Is The Sea&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;I Smell Winter&quot; by &lt;strong&gt;The Housemartins&lt;/strong&gt; from &lt;i&gt;Now Thats What I Call Quite Good&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Issa&quot; by &lt;strong&gt;Dobet Gnahore&lt;/strong&gt; from &lt;i&gt;Na Afriki&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Fuck You&quot; by &lt;strong&gt;Lily Allen&lt;/strong&gt; from &lt;i&gt;Its Not Me, Its You&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Numbers&quot; by &lt;strong&gt;Kraftwerk&lt;/strong&gt; from &lt;i&gt;Computer World&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Ride a White Horse&quot; by &lt;strong&gt;Goldfrapp&lt;/strong&gt; from &lt;i&gt;Supernature&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Femme L'a Dit&quot; by &lt;strong&gt;Feufollet&lt;/strong&gt; from &lt;i&gt;Cow Island Hop&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Hemipode&quot; by &lt;strong&gt;Amiina&lt;/strong&gt; from &lt;i&gt;AnimaminA&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;No Cars Go&quot; by &lt;strong&gt;Arcade Fire&lt;/strong&gt; from &lt;i&gt;Neon Bible&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Innocence&quot; by &lt;strong&gt;Bjork&lt;/strong&gt; from &lt;i&gt;Volta&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Closer&quot; by &lt;strong&gt;Corinne Bailey Rae&lt;/strong&gt; from &lt;i&gt;The Sea&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Snookered&quot; by &lt;strong&gt;Dan Deacon&lt;/strong&gt; from &lt;i&gt;Bromst&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&quot;Title and Registration&quot; by &lt;strong&gt;Death Cab For Cutie&lt;/strong&gt; from &lt;i&gt;Transatlanticism&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>